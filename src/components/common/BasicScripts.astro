---
import { UI } from 'astrowind:config';
---

<script is:inline define:vars={{ defaultTheme: UI.theme }}>
  if (window.basic_script) {
    return;
  }

  window.basic_script = true;

  function applyTheme(theme) {
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
  }

  const initTheme = function () {
    if ((defaultTheme && defaultTheme.endsWith(':only')) || (!localStorage.theme && defaultTheme !== 'system')) {
      applyTheme(defaultTheme.replace(':only', ''));
    } else if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      applyTheme('dark');
    } else {
      applyTheme('light');
    }
  };
  initTheme();

  function attachEvent(selector, event, fn) {
    const matches = typeof selector === 'string' ? document.querySelectorAll(selector) : selector;
    if (matches && matches.length) {
      matches.forEach((elem) => {
        elem.addEventListener(event, (e) => fn(e, elem), false);
      });
    }
  }

  const onLoad = function () {
    let lastKnownScrollPosition = window.scrollY;
    let ticking = true;

    attachEvent('#header nav', 'click', function () {
      document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
      document.body.classList.remove('overflow-hidden');
      document.getElementById('header')?.classList.remove('h-screen');
      document.getElementById('header')?.classList.remove('expanded');
      document.getElementById('header')?.classList.remove('bg-page');
      document.querySelector('#header nav')?.classList.add('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.add('hidden');
    });

    attachEvent('[data-aw-toggle-menu]', 'click', function (_, elem) {
      elem.classList.toggle('expanded');
      document.body.classList.toggle('overflow-hidden');
      document.getElementById('header')?.classList.toggle('h-screen');
      document.getElementById('header')?.classList.toggle('expanded');
      document.getElementById('header')?.classList.toggle('bg-page');
      document.querySelector('#header nav')?.classList.toggle('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.toggle('hidden');
    });

    attachEvent('[data-aw-toggle-color-scheme]', 'click', function () {
      if (defaultTheme.endsWith(':only')) {
        return;
      }

      Observer.removeAnimationDelay();

      document.documentElement.classList.toggle('dark');
      localStorage.theme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
    });

    attachEvent('[data-aw-social-share]', 'click', function (_, elem) {
      const network = elem.getAttribute('data-aw-social-share');
      const url = encodeURIComponent(elem.getAttribute('data-aw-url'));
      const text = encodeURIComponent(elem.getAttribute('data-aw-text'));

      let href;
      switch (network) {
        case 'facebook':
          href = `https://www.facebook.com/sharer.php?u=${url}`;
          break;
        case 'twitter':
          href = `https://twitter.com/intent/tweet?url=${url}&text=${text}`;
          break;
        case 'linkedin':
          href = `https://www.linkedin.com/shareArticle?mini=true&url=${url}&title=${text}`;
          break;
        case 'whatsapp':
          href = `https://wa.me/?text=${text}%20${url}`;
          break;
        case 'mail':
          href = `mailto:?subject=%22${text}%22&body=${text}%20${url}`;
          break;

        default:
          return;
      }

      const newlink = document.createElement('a');
      newlink.target = '_blank';
      newlink.href = href;
      newlink.click();
    });

    const screenSize = window.matchMedia('(max-width: 767px)');
    screenSize.addEventListener('change', function () {
      document.querySelector('[data-aw-toggle-menu]')?.classList.remove('expanded');
      document.body.classList.remove('overflow-hidden');
      document.getElementById('header')?.classList.remove('h-screen');
      document.getElementById('header')?.classList.remove('expanded');
      document.getElementById('header')?.classList.remove('bg-page');
      document.querySelector('#header nav')?.classList.add('hidden');
      document.querySelector('#header > div > div:last-child')?.classList.add('hidden');
    });

    function applyHeaderStylesOnScroll() {
      const header = document.querySelector('#header[data-aw-sticky-header]');
      if (!header) return;
      if (lastKnownScrollPosition > 60 && !header.classList.contains('scroll')) {
        header.classList.add('scroll');
      } else if (lastKnownScrollPosition <= 60 && header.classList.contains('scroll')) {
        header.classList.remove('scroll');
      }
      ticking = false;
    }
    applyHeaderStylesOnScroll();

    attachEvent([document], 'scroll', function () {
      lastKnownScrollPosition = window.scrollY;

      if (!ticking) {
        window.requestAnimationFrame(() => {
          applyHeaderStylesOnScroll();
        });
        ticking = true;
      }
    });

    // Analytics bindings
    function gtagEvent(event, params = {}) {
      if (window.gtag) {
        window.gtag('event', event, params);
      }
    }
    attachEvent('[data-gtag-event]', 'click', function (e, el) {
      const name = el.getAttribute('data-gtag-event');
      const label = el.getAttribute('aria-label') || el.textContent?.trim() || el.getAttribute('href') || '';
      gtagEvent(name || 'click', { label, path: location.pathname });
    });
    attachEvent('a[href^="mailto:"]', 'click', function (e, el) {
      const email = el.getAttribute('href')?.replace('mailto:', '') || '';
      gtagEvent('contact_mail', { email, path: location.pathname });
    });
    attachEvent('a[href^="tel:"]', 'click', function (e, el) {
      const phone = el.getAttribute('href')?.replace('tel:', '') || '';
      gtagEvent('contact_tel', { phone, path: location.pathname });
    });
    attachEvent('a[href$=.pdf]', 'click', function (e, el) {
      const href = el.getAttribute('href') || '';
      gtagEvent('download_pdf', { href, path: location.pathname });
    });
    attachEvent('form', 'submit', function (e, el) {
      const id = el.getAttribute('id') || 'form';
      gtagEvent('form_submit', { id, path: location.pathname });
    });
  };
  const onPageShow = function () {
    document.documentElement.classList.add('motion-safe:scroll-smooth');
    const elem = document.querySelector('[data-aw-toggle-menu]');
    if (elem) {
      elem.classList.remove('expanded');
    }
    document.body.classList.remove('overflow-hidden');
    document.getElementById('header')?.classList.remove('h-screen');
    document.getElementById('header')?.classList.remove('expanded');
    document.querySelector('#header nav')?.classList.add('hidden');
  };

  window.onload = onLoad;
  window.onpageshow = onPageShow;

  document.addEventListener('astro:after-swap', () => {
    initTheme();
    onLoad();
    onPageShow();
  });
</script>

<script is:inline>
  // UTM population and CRM submission (HubSpot/Pipedrive/email fallback)
  (function () {
    const params = new URLSearchParams(location.search);
    const get = (k) => params.get(k) || '';

    function fillHidden() {
      const ids = ['utm_source','utm_medium','utm_campaign','utm_term','utm_content','page_url','referrer','timestamp'];
      const values = {
        utm_source: get('utm_source'),
        utm_medium: get('utm_medium'),
        utm_campaign: get('utm_campaign'),
        utm_term: get('utm_term'),
        utm_content: get('utm_content'),
        page_url: location.href,
        referrer: document.referrer || '',
        timestamp: new Date().toISOString(),
      };
      ids.forEach((id) => {
        const el = document.getElementById(id);
        if (el) el.value = values[id] || '';
      });
    }

    function bindSubmit() {
      const form = document.querySelector('form[data-crm-form]');
      if (!form) return;
    form.addEventListener('submit', async (e) => {
      try {
          // Honeypot: abort if filled
          const hp = (form.querySelector('#empresa_hp') || {}).value || '';
          if (hp && hp.trim().length > 0) {
            e.preventDefault();
            console.warn('Honeypot triggered');
            return;
          }
          // GA event
          if (window.gtag) {
            window.gtag('event', 'form_submit', { id: form.getAttribute('id') || 'lead-form', path: location.pathname });
          }
          const portal = (window.HS_PORTAL_ID || '').toString();
          const formGuid = (window.HS_FORM_GUID || '').toString();
          if (portal && formGuid) {
            e.preventDefault();
            const fd = new FormData(form);
            const fields = [];
            fd.forEach((value, name) => fields.push({ name, value: String(value) }));
            const payload = {
              fields,
              context: {
                pageUri: location.href,
                pageName: document.title,
                hutk: (document.cookie.match(/hubspotutk=([^;]+)/) || [])[1] || undefined,
              },
            };
            const url = `https://api.hsforms.com/submissions/v3/integration/submit/${portal}/${formGuid}`;
            const res = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
            if (res.ok) {
              alert('Gracias. Hemos recibido su mensaje.');
              form.reset();
              return;
            } else {
              console.warn('HubSpot submission failed', await res.text());
            }
          }
          const pdUrl = (window.PIPEDRIVE_WEBFORM_URL || '').toString();
          if (pdUrl) {
            e.preventDefault();
            const fd = new FormData(form);
            await fetch(pdUrl, { method: 'POST', body: fd, mode: 'no-cors' });
            alert('Gracias. Hemos recibido su mensaje.');
            form.reset();
            return;
          }
          // Email fallback
          const email = 'info@antaresep.com';
          const name = (form.querySelector('[name="nombre"]') || {}).value || '';
          const phone = (form.querySelector('[name="telefono"]') || {}).value || '';
          const from = (form.querySelector('[name="email"]') || {}).value || '';
          const msg = (form.querySelector('[name="mensaje"], #textarea') || {}).value || '';
          const body = encodeURIComponent(`Nombre: ${name}\nEmail: ${from}\nTeléfono: ${phone}\nMensaje: ${msg}\n\nUTM source: ${get('utm_source')}`);
          alert('Gracias. Se abrirá su correo para enviar el mensaje.');
          window.location.href = `mailto:${email}?subject=Contacto Antares&body=${body}`;
        } catch (err) {
          console.error(err);
        }
      });
    }

    document.addEventListener('DOMContentLoaded', () => {
      fillHidden();
      bindSubmit();
    });
    document.addEventListener('astro:after-swap', () => {
      fillHidden();
      bindSubmit();
    });
  })();
</script>

<script is:inline>
  /* Inspired by: https://github.com/heidkaemper/tailwindcss-intersect */
  const Observer = {
    observer: null,
    delayBetweenAnimations: 100,
    animationCounter: 0,
    elements: null,

    start() {
      const selectors = [
        '[class*=" intersect:"]',
        '[class*=":intersect:"]',
        '[class^="intersect:"]',
        '[class="intersect"]',
        '[class*=" intersect "]',
        '[class^="intersect "]',
        '[class$=" intersect"]',
      ];

      this.elements = Array.from(document.querySelectorAll(selectors.join(',')));

      const getThreshold = (element) => {
        if (element.classList.contains('intersect-full')) return 0.99;
        if (element.classList.contains('intersect-half')) return 0.5;
        if (element.classList.contains('intersect-quarter')) return 0.25;
        return 0;
      };

      this.elements.forEach((el) => {
        el.setAttribute('no-intersect', '');
        el._intersectionThreshold = getThreshold(el);
      });

      const callback = (entries) => {
        entries.forEach((entry) => {
          requestAnimationFrame(() => {
            const target = entry.target;
            const intersectionRatio = entry.intersectionRatio;
            const threshold = target._intersectionThreshold;

            if (target.classList.contains('intersect-no-queue')) {
              if (entry.isIntersecting) {
                target.removeAttribute('no-intersect');
                if (target.classList.contains('intersect-once')) {
                  this.observer.unobserve(target);
                }
              } else {
                target.setAttribute('no-intersect', '');
              }
              return;
            }

            if (intersectionRatio >= threshold) {
              if (!target.hasAttribute('data-animated')) {
                target.removeAttribute('no-intersect');
                target.setAttribute('data-animated', 'true');

                const delay = this.animationCounter * this.delayBetweenAnimations;
                this.animationCounter++;

                target.style.transitionDelay = `${delay}ms`;
                target.style.animationDelay = `${delay}ms`;

                if (target.classList.contains('intersect-once')) {
                  this.observer.unobserve(target);
                }
              }
            } else {
              target.setAttribute('no-intersect', '');
              target.removeAttribute('data-animated');
              target.style.transitionDelay = '';
              target.style.animationDelay = '';

              this.animationCounter = 0;
            }
          });
        });
      };

      this.observer = new IntersectionObserver(callback.bind(this), { threshold: [0, 0.25, 0.5, 0.99] });

      this.elements.forEach((el) => {
        this.observer.observe(el);
      });
    },

    /* 
      REF: #643;
      We need to remove the delay to fix flickering/delay
      when toggling the theme. Observer only removes them
      after data-animated is gone (out of view).
    */
    removeAnimationDelay() {
      this.elements.forEach((el) => {
        if (el.getAttribute('data-animated') === 'true') {
          el.style.transitionDelay = '';
          el.style.animationDelay = '';
        }
      });
    },
  };

  Observer.start();

  document.addEventListener('astro:after-swap', () => {
    Observer.start();
  });
</script>
